{"version":3,"sources":["components/contact-card/ContactCard.js","components/links-card/LinksCard.js","components/projects-card/ProjectsCard.js","providers/AppContext.js","components/theme-selector/ThemeSelector.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","COMPONENT_CLASS","react_default","a","createElement","className","concat","this","data-testid","href","target","rel","React","Component","LinksCard","SITES","name","url","icon","faGithub","faNpm","faYoutube","_this2","map","site","i","key","index_es","ProjectsCard","PROJECTS","project","AppContext","createContext","AppConsumer","Consumer","AppProvider","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","theme","handleThemeChanged","setState","inherits","createClass","value","initializeTheme","children","props","Provider","onThemeChanged","ThemeSelector","handleToggleButtonPressed","_ref","title","onClick","bind","renderIcon","isDark","faSun","faMoon","color","App","components_contact_card_ContactCard","components_projects_card_ProjectsCard","components_links_card_LinksCard","components_theme_selector_ThemeSelector","isInProduction","initializeReactGA","ReactGA","initialize","pageview","hostname","window","location","includes","Boolean","match","ReactDOM","render","AppContext_AppProvider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVA2BeA,0NAtBbC,gBAAkB,uFAGhB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,SAAkCO,cAAY,gBAC9DN,EAAAC,EAAAC,cAAA,UAAQC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,aACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,YAAb,uBAEFC,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,cAChBC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,UAAZ,sGAGAC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,cAAZ,uBACsBC,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sDAAsDC,OAAO,SAASC,IAAI,uBAAlF,YADtB,QAC+IT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,wCAAR,SAD/I,cAdgBG,IAAMC,kCC6CjBC,6MAzCbb,gBAAkB,eAClBc,MAAQ,CACN,CACEC,KAAM,iBACNC,IAAK,oCACLC,KAAMC,KAER,CACEH,KAAM,eACNC,IAAK,gCACLC,KAAME,KAER,CACEJ,KAAM,kBACNC,IAAK,kCACLC,KAAMG,8EAID,IAAAC,EAAAf,KACP,OACEL,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,SAAkCO,cAAY,cAC9DN,EAAAC,EAAAC,cAAA,UAAQC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,aACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,YAAb,UAEFC,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,cAChBC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,YACVM,KAAKQ,MAAMQ,IAAI,SAACC,EAAMC,GAAP,OACdvB,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKgB,EAAKrB,gBAAV,UAAmCyB,IAAKD,GACnDvB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBtB,UAAS,GAAAC,OAAKgB,EAAKrB,gBAAV,UAAmCiB,KAAMM,EAAKN,OACxEhB,EAAAC,EAAAC,cAAA,KAAGK,KAAMe,EAAKP,IAAKP,OAAO,SAASC,IAAI,uBAAuBa,EAAKR,mBAhC3DJ,IAAMC,WCwDfe,oNAtDb3B,gBAAkB,kBAClB4B,SAAW,CACT,CACEb,KAAM,mBACNC,IAAK,qDACLC,KAAMC,KAER,CACEH,KAAM,yBACNC,IAAK,2DACLC,KAAMC,KAER,CACEH,KAAM,mBACNC,IAAK,qDACLC,KAAMC,KAER,CACEH,KAAM,mBACNC,IAAK,qDACLC,KAAMC,KAER,CACEH,KAAM,cACNC,IAAK,gDACLC,KAAMC,8EAID,IAAAG,EAAAf,KACP,OACEL,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,SAAkCO,cAAY,iBAC9DN,EAAAC,EAAAC,cAAA,UAAQC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,aACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,YAAb,aAEFC,EAAAC,EAAAC,cAAA,WAASC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,cAChBC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,WAAZ,oEACmEC,EAAAC,EAAAC,cAAA,KAAGK,KAAK,oCAAoCC,OAAO,SAASC,IAAI,uBAAhE,kBADnE,KAGAT,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,eACVM,KAAKsB,SAASN,IAAI,SAACO,EAASL,GAAV,OACjBvB,EAAAC,EAAAC,cAAA,MAAIC,UAAS,GAAAC,OAAKgB,EAAKrB,gBAAV,aAAsCyB,IAAKD,GACtDvB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBtB,UAAS,GAAAC,OAAKgB,EAAKrB,gBAAV,UAAmCiB,KAAMY,EAAQZ,OAC3EhB,EAAAC,EAAAC,cAAA,KAAGK,KAAMqB,EAAQb,IAAKP,OAAO,SAASC,IAAI,uBAAuBmB,EAAQd,mBA7C9DJ,IAAMC,oBCH3BkB,EAAanB,IAAMoB,gBAEZC,EAAcF,EAAWG,SAEzBC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAhC,KAAA4B,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,EAAAC,OAAAQ,EAAA,EAAAR,CAAAhC,MAAA8B,EAAAE,OAAAS,EAAA,EAAAT,CAAAJ,IAAAc,KAAAC,MAAAb,EAAA,CAAA9B,MAAAD,OAAAsC,MAEEO,MAAQ,CACNC,MAAO,MAHXd,EA2BEe,mBAAqB,SAACD,GACpBd,EAAKgB,SAAS,CAAEF,WA5BpBd,EAAA,OAAAC,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAAC,GAAAG,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAA,EAAAT,IAAA,oBAAA+B,MAAA,WAOIlD,KAAKmD,oBAPT,CAAAhC,IAAA,SAAA+B,MAAA,WAUW,IAECE,EAAapD,KAAKqD,MAAlBD,SACAP,EAAU7C,KAAK4C,MAAfC,MAER,OACElD,EAAAC,EAAAC,cAAC2B,EAAW8B,SAAZ,CACEJ,MAAO,CACLL,QACAU,eAAgBvD,KAAK8C,qBAGrBM,KAtBV,CAAAjC,IAAA,kBAAA+B,MAAA,WAgCIlD,KAAK+C,SAAS,CAAEF,MAAO,aAhC3BjB,EAAA,CAAiCvB,IAAMC,2BCqCxBkD,6MAnCb9D,gBAAkB,mBA4BlB+D,0BAA4B,SAACZ,EAAOU,GAElCA,EAD2B,SAAVV,EAAmB,QAAU,iFA3BvC,IAAA9B,EAAAf,KACP,OACEL,EAAAC,EAAAC,cAAC6B,EAAD,KACI,SAAAgC,GAAA,IAAGb,EAAHa,EAAGb,MAAOU,EAAVG,EAAUH,eAAV,OACA5D,EAAAC,EAAAC,cAAA,OAAKC,UAAS,GAAAC,OAAKgB,EAAKrB,kBACtBC,EAAAC,EAAAC,cAAA,UACEC,UAAS,GAAAC,OAAKgB,EAAKrB,gBAAV,mBACTiE,MAAiB,SAAVd,EAAmB,cAAgB,aAC1Ce,QAAS7C,EAAK0C,0BAA0BI,KAAK9C,EAAM8B,EAAOU,IAExDxC,EAAK+C,WAAWjB,0CAQnBA,GACT,IAAMkB,EAAmB,SAAVlB,EACTlC,EAAOoD,EAASC,IAAQC,IACxBC,EAAQH,EAAS,OAAS,OAEhC,OAAOpE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBtB,UAAS,GAAAC,OAAKC,KAAKN,gBAAV,UAAmCiB,KAAMA,EAAMuD,MAAOA,WA3B/D5D,aC0Cb6D,mLArCX,OACExE,EAAAC,EAAAC,cAAC6B,EAAD,KACI,SAAAgC,GAAA,IAAGb,EAAHa,EAAGb,MAAH,OACAlD,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAAe8C,GAAS5C,cAAY,OAChDN,EAAAC,EAAAC,cAACuE,EAAD,CAAavB,MAAOA,IACpBlD,EAAAC,EAAAC,cAACwE,EAAD,CAAcxB,MAAOA,IACrBlD,EAAAC,EAAAC,cAACyE,EAAD,CAAWzB,MAAOA,IAClBlD,EAAAC,EAAAC,cAAC0E,EAAD,qDAQJvE,KAAKwE,kBACPxE,KAAKyE,gEAKPC,IAAQC,WAAW,kBACnBD,IAAQE,SAAS,sDAIjB,IACQC,EAAaC,OAAOC,SAApBF,SACJL,GAAiB,EAKrB,MAP4B,CAAC,4BAGLQ,SAASH,KAC/BL,GAAiB,GAGZA,SAnCOlE,aCGE2E,QACW,cAA7BH,OAAOC,SAASF,UAEe,UAA7BC,OAAOC,SAASF,UAEhBC,OAAOC,SAASF,SAASK,MACvB,2DCXNC,IAASC,OACPzF,EAAAC,EAAAC,cAACwF,EAAD,KACE1F,EAAAC,EAAAC,cAACyF,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fd4e06f.chunk.js","sourcesContent":["import React from 'react';\nimport './ContactCard.scss';\n\nclass ContactCard extends React.Component {\n\n  COMPONENT_CLASS = 'contact-card';\n\n  render() {\n    return (\n      <section className={`${this.COMPONENT_CLASS} card`} data-testid=\"contact-card\">\n        <header className={`${this.COMPONENT_CLASS}__header`}>\n          <h1 className={`${this.COMPONENT_CLASS}__title`}>Felipe CÃ©spedes</h1>\n        </header>\n        <article className={`${this.COMPONENT_CLASS}__content`}>\n          <p className={`${this.COMPONENT_CLASS}__bio`}>\n            Senior full-stack developer working mostly with web related technologies and open-source software.\n          </p>\n          <p className={`${this.COMPONENT_CLASS}__contact`}>\n            You can reach me on <a href=\"https://www.linkedin.com/in/andres-felipe-cespedes/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a> and <a href=\"mailto:felipecespedespisso@gmail.com\">Gmail</a>.\n          </p>\n        </article>\n      </section>\n    );\n  }\n\n}\n\nexport default ContactCard;\n","import React from 'react';\nimport './LinksCard.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faNpm, faYoutube } from  '@fortawesome/free-brands-svg-icons';\n\nclass LinksCard extends React.Component {\n\n  COMPONENT_CLASS = 'links-card';\n  SITES = [\n    {\n      name: 'Github Profile',\n      url: 'https://github.com/felipecespedes',\n      icon: faGithub\n    },\n    {\n      name: 'NPM Packages',\n      url: 'https://www.npmjs.com/~viwell',\n      icon: faNpm\n    },\n    {\n      name: 'Youtube Channel',\n      url: 'https://www.youtube.com/codigea',\n      icon: faYoutube\n    }\n  ];\n\n  render() {\n    return (\n      <section className={`${this.COMPONENT_CLASS} card`} data-testid=\"links-card\">\n        <header className={`${this.COMPONENT_CLASS}__header`}>\n          <h2 className={`${this.COMPONENT_CLASS}__title`}>Links</h2>\n        </header>\n        <article className={`${this.COMPONENT_CLASS}__content`}>\n          <ul className={`${this.COMPONENT_CLASS}__sites`}>\n            {this.SITES.map((site, i) =>\n              <li className={`${this.COMPONENT_CLASS}__site`} key={i}>\n                <FontAwesomeIcon className={`${this.COMPONENT_CLASS}__icon`} icon={site.icon} />\n                <a href={site.url} target=\"_blank\" rel=\"noopener noreferrer\">{site.name}</a>\n              </li>\n            )}\n          </ul>\n        </article>\n      </section>\n    );\n  }\n\n}\n\nexport default LinksCard;\n","import React from 'react';\nimport './ProjectsCard.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from  '@fortawesome/free-brands-svg-icons';\n\nclass ProjectsCard extends React.Component {\n\n  COMPONENT_CLASS = 'projects-card';\n  PROJECTS = [\n    {\n      name: 'Viwell Framework',\n      url: 'https://github.com/felipecespedes/viwell-framework',\n      icon: faGithub\n    },\n    {\n      name: 'Your Own MVC Framework',\n      url: 'https://github.com/felipecespedes/your-own-mvc-framework',\n      icon: faGithub\n    },\n    {\n      name: 'ng-letter-avatar',\n      url: 'https://github.com/felipecespedes/ng-letter-avatar',\n      icon: faGithub\n    },\n    {\n      name: 'ng-elastic-input',\n      url: 'https://github.com/felipecespedes/ng-elastic-input',\n      icon: faGithub\n    },\n    {\n      name: 'gpio-omega2',\n      url: 'https://github.com/felipecespedes/gpio-omega2',\n      icon: faGithub\n    }\n  ];\n\n  render() {\n    return (\n      <section className={`${this.COMPONENT_CLASS} card`} data-testid=\"projects-card\">\n        <header className={`${this.COMPONENT_CLASS}__header`}>\n          <h2 className={`${this.COMPONENT_CLASS}__title`}>Projects</h2>\n        </header>\n        <article className={`${this.COMPONENT_CLASS}__content`}>\n          <p className={`${this.COMPONENT_CLASS}__info`}>\n            These are some of my projects. You can find these and more on my <a href=\"https://github.com/felipecespedes\" target=\"_blank\" rel=\"noopener noreferrer\">Github Profile</a>.\n          </p>\n          <ul className={`${this.COMPONENT_CLASS}__projects`}>\n            {this.PROJECTS.map((project, i) =>\n              <li className={`${this.COMPONENT_CLASS}__project`} key={i}>\n                <FontAwesomeIcon className={`${this.COMPONENT_CLASS}__icon`} icon={project.icon} />\n                <a href={project.url} target=\"_blank\" rel=\"noopener noreferrer\">{project.name}</a>\n              </li>\n            )}\n          </ul>\n        </article>\n      </section>\n    );\n  }\n\n}\n\nexport default ProjectsCard;\n","import React from 'react';\n\nconst AppContext = React.createContext();\n\nexport const AppConsumer = AppContext.Consumer;\n\nexport class AppProvider extends React.Component {\n\n  state = {\n    theme: null,\n  };\n\n  componentDidMount() {\n    this.initializeTheme();\n  }\n\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const { children } = this.props;\n    const { theme } = this.state;\n\n    return (\n      <AppContext.Provider\n        value={{\n          theme,\n          onThemeChanged: this.handleThemeChanged\n        }}\n      >\n        { children }\n      </AppContext.Provider>\n    );\n  }\n\n  handleThemeChanged = (theme) => {\n    this.setState({ theme });\n  }\n\n  initializeTheme() {\n    this.setState({ theme: 'dark' });\n  }\n\n}\n","import React, { Component } from 'react';\nimport './ThemeSelector.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport { AppConsumer } from '../../providers/AppContext';\n\nclass ThemeSelector extends Component {\n\n  COMPONENT_CLASS = 'theme-selector';\n\n  render() {\n    return (\n      <AppConsumer>\n        { ({ theme, onThemeChanged }) => (\n          <div className={`${this.COMPONENT_CLASS}`}>\n            <button\n              className={`${this.COMPONENT_CLASS}__toggle-button`}\n              title={theme === 'dark' ? 'Light Theme' : 'Dark Theme'}\n              onClick={this.handleToggleButtonPressed.bind(this, theme, onThemeChanged)}\n            >\n              { this.renderIcon(theme) }\n            </button>\n          </div>\n        ) }\n      </AppConsumer>\n    );\n  }\n\n  renderIcon(theme) {\n    const isDark = theme === 'dark';\n    const icon = isDark ? faSun : faMoon;\n    const color = isDark ? '#000' : '#fff';\n\n    return <FontAwesomeIcon className={`${this.COMPONENT_CLASS}__icon`} icon={icon} color={color} />;\n  }\n\n  handleToggleButtonPressed = (theme, onThemeChanged) => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    onThemeChanged(newTheme);\n  }\n\n}\n\nexport default ThemeSelector;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport ContactCard from './components/contact-card/ContactCard';\nimport LinksCard from './components/links-card/LinksCard';\nimport ProjectsCard from './components/projects-card/ProjectsCard';\nimport ReactGA from 'react-ga';\nimport { AppConsumer } from './providers/AppContext';\nimport ThemeSelector from './components/theme-selector/ThemeSelector';\n\nclass App extends Component {\n  render() {\n    return (\n      <AppConsumer>\n        { ({ theme }) => (\n          <div className={`app theme-${theme}`} data-testid=\"app\">\n            <ContactCard theme={theme} />\n            <ProjectsCard theme={theme} />\n            <LinksCard theme={theme} />\n            <ThemeSelector />\n          </div>\n        ) }\n      </AppConsumer>\n    );\n  }\n\n  componentDidMount() {\n    if (this.isInProduction()) {\n      this.initializeReactGA();\n    }\n  }\n\n  initializeReactGA() {\n    ReactGA.initialize('UA-137663539-1');\n    ReactGA.pageview('/homepage');\n  }\n\n  isInProduction() {\n    const productionHostnames = ['felipecespedes.github.io'];\n    const { hostname } = window.location;\n    let isInProduction = false;\n    if (productionHostnames.includes(hostname)) {\n      isInProduction = true;\n    }\n\n    return isInProduction;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './providers/AppContext';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}